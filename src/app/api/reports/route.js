import { getAllReports, createReport } from '../../../../lib/database.js';
import { validateReportData } from '../../../../lib/security.js';

export async function GET() {
  try {
    console.log('üì° API: R√©cup√©ration des rapports...');
    const reports = await getAllReports();
    console.log(`‚úÖ API: ${reports.length} rapports r√©cup√©r√©s avec succ√®s`);
    return Response.json(reports);
  } catch (error) {
    console.error('‚ùå API Error:', error.message);
    
    // R√©ponse gracieuse m√™me en cas d'erreur
    return Response.json({
      success: false,
      message: 'Service temporairement indisponible',
      reports: [], // Tableau vide plut√¥t qu'une erreur
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    }, { status: 200 }); // 200 au lieu de 500 pour √©viter les erreurs c√¥t√© client
  }
}

export async function POST(request) {
  try {
    const reportData = await request.json();
    
    // Validation et nettoyage des donn√©es du rapport
    const validation = validateReportData(reportData);
    if (!validation.isValid) {
      return Response.json(
        { error: `Donn√©es invalides: ${validation.errors.join(', ')}` },
        { status: 400 }
      );
    }
    
    const result = await createReport(validation.cleanData);
    return Response.json(
      { success: true, id: `rpt_${result.insertId}` }, 
      { status: 201 }
    );
  } catch (error) {
    console.error('API Error:', error);
    return Response.json(
      { error: 'Erreur lors de la cr√©ation du rapport' }, 
      { status: 500 }
    );
  }
}